diff --git a/src/server/game/Battlegrounds/Zones/BattlegroundDS.cpp b/src/server/game/Battlegrounds/Zones/BattlegroundDS.cpp
index 1658f76..ecb14b8 100755
--- a/src/server/game/Battlegrounds/Zones/BattlegroundDS.cpp
+++ b/src/server/game/Battlegrounds/Zones/BattlegroundDS.cpp
@@ -37,6 +37,9 @@ BattlegroundDS::BattlegroundDS()
     m_StartMessageIds[BG_STARTING_EVENT_SECOND] = LANG_ARENA_THIRTY_SECONDS;
     m_StartMessageIds[BG_STARTING_EVENT_THIRD]  = LANG_ARENA_FIFTEEN_SECONDS;
     m_StartMessageIds[BG_STARTING_EVENT_FOURTH] = LANG_ARENA_HAS_BEGUN;
+
+    m_knockback = 5000;
+    m_knockbackCheck = true;
 }
 
 BattlegroundDS::~BattlegroundDS()
@@ -76,6 +79,23 @@ void BattlegroundDS::Update(uint32 diff)
     }
     else
         setWaterFallTimer(getWaterFallTimer() - diff);
+
+        if (GetStatus() == STATUS_IN_PROGRESS)
+        {
+                if(m_knockback < diff && m_knockbackCheck)
+                {
+                        for(BattlegroundPlayerMap::const_iterator itr = GetPlayers().begin(); itr != GetPlayers().end();itr++)
+                        {
+                                Player * plr = ObjectAccessor::FindPlayer(itr->first);
+                                if (plr->GetTeam() == ALLIANCE && plr->GetDistance2d(1214, 765) <= 50 && plr->GetPositionZ() > 10)
+                                        KnockBackPlayer(plr, 6.15f, 50.00f, 7.00f);
+                                if (plr->GetTeam() == HORDE && plr->GetDistance2d(1369, 817) <= 50 && plr->GetPositionZ() > 10)
+                                        KnockBackPlayer(plr, 3.10f, 50.00f, 7.00f);
+                                plr->RemoveAurasDueToSpell(48018);
+                        }
+                        m_knockbackCheck = false;
+                 } else m_knockback -= diff;
+        }
 }
 
 void BattlegroundDS::StartingEventCloseDoors()
@@ -97,6 +117,9 @@ void BattlegroundDS::StartingEventOpenDoors()
 
     for (uint32 i = BG_DS_OBJECT_WATER_1; i <= BG_DS_OBJECT_WATER_2; ++i)
         SpawnBGObject(i, getWaterFallTimer());
+
+    m_knockback = 5000;
+    m_knockbackCheck = true;
 }
 
 void BattlegroundDS::AddPlayer(Player *plr)
@@ -169,6 +192,8 @@ void BattlegroundDS::Reset()
 {
     //call parent's class reset
     Battleground::Reset();
+    m_knockback = 5000;
+    m_knockbackCheck = true;
 }
 
 
@@ -190,3 +215,20 @@ bool BattlegroundDS::SetupBattleground()
 
     return true;
 }
+
+void BattlegroundDS::KnockBackPlayer(Unit *pPlayer, float angle, float horizontalSpeed, float verticalSpeed)
+{
+    if(pPlayer->GetTypeId() == TYPEID_PLAYER)
+    {
+        WorldPacket data(SMSG_MOVE_KNOCK_BACK, 8+4+4+4+4+2);
+        data.append(pPlayer->GetPackGUID());
+        data << uint32(0);
+        data << float(cos(angle));
+        data << float(sin(angle));
+        data << float(horizontalSpeed);
+        data << float(-verticalSpeed);
+        ((Player*)pPlayer)->GetSession()->SendPacket(&data);
+    }
+    else
+        sLog->outError("The target of KnockBackPlayer must be a player !");
+}
diff --git a/src/server/game/Battlegrounds/Zones/BattlegroundDS.h b/src/server/game/Battlegrounds/Zones/BattlegroundDS.h
index 0071a38..057dd35 100755
--- a/src/server/game/Battlegrounds/Zones/BattlegroundDS.h
+++ b/src/server/game/Battlegrounds/Zones/BattlegroundDS.h
@@ -43,10 +43,10 @@ enum BattlegroundDSObjects
 };
 
 enum BattlegroundDSData
-{ // These values are NOT blizzlike... need the correct data!
-    BG_DS_WATERFALL_TIMER_MIN                    = 30000,
+{
+    BG_DS_WATERFALL_TIMER_MIN                    = 35000,
     BG_DS_WATERFALL_TIMER_MAX                    = 60000,
-    BG_DS_WATERFALL_DURATION                     = 10000,
+    BG_DS_WATERFALL_DURATION                     = 30000,
 };
 
 class BattlegroundDSScore : public BattlegroundScore
@@ -78,7 +78,9 @@
     private:
         uint32 m_waterTimer;
         bool m_waterfallActive;
-
+	 bool m_knockbackCheck;
+	 uint32 m_knockback;
+	 void KnockBackPlayer(Unit *pPlayer, float angle, float horizontalSpeed, float verticalSpeed);
         virtual void PostUpdateImpl(uint32 diff);
     protected:
         bool isWaterFallActive() { return m_waterfallActive; };
--- a/src/server/game/Battlegrounds/Battleground.h
+++ b/src/server/game/Battlegrounds/Battleground.h
@@ -455,10 +455,11 @@ class Battleground
 
         /* Map pointers */
         void SetBgMap(BattlegroundMap* map) { m_Map = map; }
-        BattlegroundMap* GetBgMap()
+        BattlegroundMap* GetBgMap(bool WithAssert = true)
         {
-            ASSERT(m_Map);
-            return m_Map;
+            if(WithAssert)
+                ASSERT(m_Map);
+                return m_Map;
         }
 
         void SetTeamStartLoc(uint32 TeamID, float X, float Y, float Z, float O);

--- a/src/server/game/Battlegrounds/Zones/BattlegroundDS.cpp
+++ b/src/server/game/Battlegrounds/Zones/BattlegroundDS.cpp
@@ -59,20 +59,21 @@ void BattlegroundDS::Update(uint32 diff)
 
     if (getWaterFallTimer() < diff)
     {
-        if (isWaterFallActive())
-        {
-            setWaterFallTimer(urand(BG_DS_WATERFALL_TIMER_MIN, BG_DS_WATERFALL_TIMER_MAX));
-            for (uint32 i = BG_DS_OBJECT_WATER_1; i <= BG_DS_OBJECT_WATER_2; ++i)
-                SpawnBGObject(i, getWaterFallTimer());
-            setWaterFallActive(false);
-        }
-        else
-        {
-            setWaterFallTimer(BG_DS_WATERFALL_DURATION);
-            for (uint32 i = BG_DS_OBJECT_WATER_1; i <= BG_DS_OBJECT_WATER_2; ++i)
-                SpawnBGObject(i, RESPAWN_IMMEDIATELY);
-            setWaterFallActive(true);
-        }
+        if (GetBgMap(false))
+            if (isWaterFallActive())
+            {
+                setWaterFallTimer(urand(BG_DS_WATERFALL_TIMER_MIN, BG_DS_WATERFALL_TIMER_MAX));
+                for (uint32 i = BG_DS_OBJECT_WATER_1; i <= BG_DS_OBJECT_WATER_2; ++i)
+                    SpawnBGObject(i, getWaterFallTimer());
+                setWaterFallActive(false);
+            }
+            else
+            {
+                setWaterFallTimer(BG_DS_WATERFALL_DURATION);
+                for (uint32 i = BG_DS_OBJECT_WATER_1; i <= BG_DS_OBJECT_WATER_2; ++i)
+                    SpawnBGObject(i, RESPAWN_IMMEDIATELY);
+                setWaterFallActive(true);
+            }
     }
     else
         setWaterFallTimer(getWaterFallTimer() - diff);